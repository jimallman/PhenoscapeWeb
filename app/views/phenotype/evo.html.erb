<h3>All phenotypes for <span class="term-name" title="<%=h @entity["id"] %>"><a href="/search/entity/<%=h @entity["id"] %>"><%=h @entity["name"] %></a></span> <%= quality_link(@quality) %>
<% if @subject != nil %>
in <%= taxon_link(@subject) %>
<% end %>
</h3>

<div id="phenotype-tree">
</div>


<script type="text/javascript">

/*
Functions for displaying annotation sources need to be stored in a dictionary and referenced later by matching with A element ID.
This is because the Yahoo tree widget requires content HTML to be provided with text, preventing attaching functions as click listeners to the A elements as they are added to the DOM.
*/
var sourceLinks = {};

var sourceLinkIDGenerator = {
	"i" : 0,
	
	"next" : function() {
		return "sourcelinkID" + this["i"]++;
	}
};

var entity = <%= @entity.to_json %>;
var quality = <%= @quality.to_json %>;
var rootData = <%= @root.to_json %>;

var tree = new YAHOO.widget.TreeView("phenotype-tree");
createNodeForTaxon(rootData, tree.getRoot());
tree.setDynamicLoad(requestDataForChildren);
tree.subscribe("clickEvent", function(arg) {
	var targetID = arg["event"]["target"]["id"];
	if ((targetID != null) && (sourceLinks[targetID] != null)) {
		sourceLinks[targetID]();
	}
	//disable clicking on whole node to expand/collapse - this allows links inside node to work properly
	return false;
});
tree.render();
YAHOO.util.Event.onDOMReady(function() {
	expandRoot();
});

function expandRoot() {
	for (var i = 0; i < tree.getRoot().children.length; i++) {
		tree.getRoot().children[i].expand();
	}
}

function requestDataForChildren(parentNode, callback) {
	var dataGetter = loadJSONDoc(URL.childPhenotypes(entity["id"], quality["id"], parentNode["data"]["id"]));
	dataGetter.addCallback(function(result) {
		loadDataForChildren(parentNode, callback, result);
	});
	dataGetter.addErrback(function(result) {
		//TODO - should put some kind of data error alert next to taxon - and remove alert
		alert(result);
		callback();
	});
}

function loadDataForChildren(parentNode, callback, result) {
	for (var i = 0; i < result["subjects"].length; i++) {
		var taxon = result["subjects"][i];
		createNodeForTaxon(taxon, parentNode);
	}
	callback();
}

function createNodeForTaxon(taxonData, parentNode) {
	var phenotypes = taxonData.phenotypes;
	var clazz = null;
	if (italicTaxon(taxonData)) {
		clazz = "italic-taxon"
	}
	var taxonName = A({href: URL.taxon(taxonData["id"]), title: taxonData["id"], "class": clazz}, taxonData["name"]);
	var phenotypesContainer = SPAN({"class": "phenotype-block"});
	for (var i = 0; i < phenotypes.length; i++) {
		var phenotype = phenotypes[i];
		var phenotypeItem = createListItemForPhenotype(phenotype);
		appendChildNodes(phenotypesContainer, phenotypeItem);
		if ((i + 1) < phenotypes.length) {
			appendChildNodes(phenotypesContainer, ", ");
		}
	}
	var container = DIV({"class": "tree-row"}, taxonName, SPAN({"class": "dotted-line"}, "........................."), phenotypesContainer);
	var outer = DIV(null, container);
	var node = new YAHOO.widget.HTMLNode({"html" : outer.innerHTML, "data" : taxonData, "href": null, "isLeaf" : taxonData["leaf"]}, parentNode);
	// don't allow blue focus color
	node.focus = function() {return true;};
	if (node.depth % 2 == 0) {
		node["className"] = "tree-depth-even";
	} else {
		node["className"] = "tree-depth-odd";
	}
	return node;
}

function createListItemForPhenotype(phenotypeData) {
	var entity = phenotypeData.entity;
	var quality = phenotypeData.quality;
	var count = phenotypeData.count;
	var entityName = A({href: URL.entity(entity["id"]), title: entity["id"]}, entity["name"]);
	var qualityName = A({href: URL.quality(quality["id"]), title: quality["id"], "target": "_blank"}, quality["name"]);
	var container = SPAN(null, entityName, " ", qualityName);
	if ((count != null) && (count != "")) {
		appendChildNodes(container, ", " + count);
	}
	if ((phenotypeData["id"] != null) && (phenotypeData["id"].length != 0)) {
		var idList = phenotypeData["id"];
		var sourceLinkID = sourceLinkIDGenerator.next();
		var sourceLink = A({"href": "#"}, IMG({"src": "/images/page_text.gif", "id": sourceLinkID}));
		sourceLinks[sourceLinkID] = function() {
			showSource(idList, $(sourceLinkID));
		}
		appendChildNodes(container, " ", sourceLink);
	}
	return container;
}

var deferred = null;

function showSource(id, element) {
	var sourcePanel = new YAHOO.widget.Panel("source_panel", {
		"context" : [element, YAHOO.widget.Overlay.TOP_RIGHT, YAHOO.widget.Overlay.BOTTOM_LEFT],
		"constraintoviewport" : true,
		"visible" : false
		});
	sourcePanel.hideEvent.subscribe(destroyPanel, sourcePanel);
	var img = IMG({"src":"/images/rotation.gif", "alt":"loading"});
	var div = DIV(null, img);
	sourcePanel.setBody(div);
	sourcePanel.setHeader("Loading...");
	if (deferred) { deferred.cancel(); }
	deferred = loadJSONDoc(URL.source([id]));
	deferred.addCallback(partial(fillInSource, sourcePanel));
	sourcePanel.render(document.body);
	sourcePanel.show();
}

function fillInSource(panel, content) {
	var taxonClass = "";
	if (italicTaxon(content["phenotype"]["subject"])) {
		taxonClass = "italic-taxon";
	}
	var taxon = A({"class": taxonClass}, content["phenotype"]["subject"]["name"]);
	var entity = A(null, content["phenotype"]["entity"]["name"]);
	var quality = A(null, content["phenotype"]["quality"]["name"]);	
	replaceChildNodes(panel.header, taxon, " ", entity, " ", quality);
	var sources = map(function(item) {
		var citation = P(null, item["publication"]);
		var number = item["character_number"];
		var characterLabel = "character";
		if ((number != null) && (number != "")) {
			characterLabel += " " + number;
		}
		characterLabel += ":";
		var characterTable = TABLE(null, TR(null, TD(null, characterLabel), TD(null, item["character_text"])));
		if (item["character_comment"].length > 0) {
			var character_comment = P({"style":"display: none;", "class":"character_comment"}, item["character_comment"]);
			var character_revealer = A({"href":"#"}, "View comment");
			var character_revealerBlock = P(null, character_revealer);
			connect(character_revealer, "onclick", function() {
				hideElement(character_revealerBlock);
				blindDown(character_comment);
				return false;
			});
			var character_commentRow = TR(null, TD({"colspan":"2"}, character_revealerBlock, character_comment));
			appendChildNodes(characterTable, character_commentRow);
		}
		appendChildNodes(characterTable, TR(null, TD(null, "state:"), TD(null, item["state_text"])));
		if (item["state_comment"].length > 0) {
			var state_comment = P({"style":"display: none;", "class":"character_comment"}, item["state_comment"]);
			var state_revealer = A({"href":"#"}, "View comment");
			var state_revealerBlock = P(null, state_revealer);
			connect(state_revealer, "onclick", function() {
				hideElement(state_revealerBlock);
				blindDown(state_comment);
				return false;
			});
			var state_commentRow = TR(null, TD({"colspan":"2"}, state_revealerBlock, state_comment));
			appendChildNodes(characterTable, state_commentRow);
		}
		return DIV(null, citation, characterTable);
	}, content["sources"]);
	replaceChildNodes(panel.body, sources);
}

function destroyPanel(type, args, obj) {
	logDebug("Destroy");
	if (deferred) { deferred.cancel(); }
	obj.destroy();
}

</script>