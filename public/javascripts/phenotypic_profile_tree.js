/* This script was compiled from CoffeeScript. Do not edit this file directly, or the changes will be overwritten next time the coffee script is compiled. */
(function() {
  var $, StateTransition, Tree, TreeNode;
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
  $ = jQuery;
  Tree = (function() {
    function Tree(container_id) {
      this.container_id = container_id;
      $(__bind(function() {
        var initial_page_load, term_info_div;
        $("#" + this.container_id).css('visibility', 'hidden');
        term_info_div = $('#term_info');
        initial_page_load = true;
        term_info_div.change(__bind(function() {
          var path;
          path = "/phenotypes/profile_tree?" + $('form[name=complex_query_form]').serialize();
          if (!initial_page_load && new StateTransition(path).redirecting) {
            this.show_loading();
          } else {
            this.destroy_spacetree();
            this.create_spacetree();
            this.query();
          }
          return this.check_empty_state();
        }, this));
        term_info_div.change();
        return initial_page_load = false;
      }, this));
    }
    Tree.prototype.create_spacetree = function() {
      $('#tree_empty_state').hide();
      this.root_node || (this.root_node = TreeNode.create_root(this));
      return this.spacetree = typeof st !== "undefined" && st !== null ? st : st = new $jit.ST({
        injectInto: this.container_id,
        duration: 600,
        transition: $jit.Trans.Quart.easeOut,
        levelDistance: 100,
        levelsToShow: 1,
        Node: {
          autoHeight: true,
          autoWidth: true,
          type: 'rectangle',
          overridable: true
        },
        Edge: {
          type: 'bezier',
          overridable: true
        },
        Navigation: {
          enable: true,
          panning: true
        },
        onCreateLabel: function(label, node) {
          label = $(label);
          label.attr('id', node.id);
          label.html(node.name);
          if (!node.data.leaf_node) {
            label.click(function() {
              return st.onClick(node.id);
            });
          }
          return label.css({
            cursor: 'pointer',
            color: '#333',
            fontSize: '0.8em',
            padding: '3px',
            'white-space': 'nowrap'
          });
        },
        request: __bind(function(nodeId, level, onComplete) {
          this.update_spacetree_callback = onComplete.onComplete;
          return this.query(nodeId);
        }, this)
      });
    };
    Tree.prototype.destroy_spacetree = function() {
      this.root_node = null;
      try {
        if (this.spacetree != null) {
          return this.spacetree.removeSubtree('root', true, 'animate');
        }
      } catch (err) {

      }
    };
    Tree.prototype.initialize_spacetree = function() {
      if (this.root_node.children.length === 1) {
        this.root_node = this.root_node.children[0];
        this.root_node.id = 'root';
      }
      this.spacetree.loadJSON(this.root_node);
      this.spacetree.compute();
      this.spacetree.plot();
      if (!this.spacetree.graph.getNode(this.spacetree.root).data.leaf_node) {
        return this.spacetree.onClick(this.spacetree.root);
      }
    };
    Tree.prototype.update_spacetree = function(node) {
      if (!(this.update_spacetree_callback || !console)) {
        return console.log("$jit failed to set update_spacetree_callback");
      }
      return this.update_spacetree_callback(node.id, node);
    };
    Tree.prototype.load_selected_phenotypes = function() {
      this.phenotype_params = $("#search_sidebar form").serialize();
      this.phenotype_count = $("#term_info .phenotype").length;
    };
    Tree.prototype.query = function(taxon_id) {
      var loading_root, url;
      if (taxon_id == null) {
        taxon_id = null;
      }
      this.load_selected_phenotypes();
      if (!(this.phenotype_count > 0)) {
        return;
      }
      this.show_loading();
      loading_root = !(taxon_id != null) || taxon_id === 'root';
      url = '/phenotypes/profile_tree?' + decodeURIComponent(this.phenotype_params);
      if (!loading_root) {
        url += "&taxon=" + taxon_id;
      }
      return $.ajax({
        url: url,
        type: 'get',
        dataType: 'script',
        data: {
          levels: 2,
          authenticitiy_token: AUTH_TOKEN
        },
        error: this.ajax_error_handler
      });
    };
    Tree.prototype.query_callback = function(matches, root_taxon_id) {
      var match, match_child, node, root_node, _i, _j, _len, _len2, _ref;
      root_node = this.find_node(root_taxon_id) || this.root_node;
      matches = matches.sortBy(function(m) {
        return m.name;
      });
      for (_i = 0, _len = matches.length; _i < _len; _i++) {
        match = matches[_i];
        node = root_node.find_or_create_child(this, match.taxon_id, match.name, {
          greatest_profile_match: match.greatest_profile_match
        });
        if (match.matches != null) {
          match.matches = match.matches.sortBy(function(m) {
            return m.name;
          });
          _ref = match.matches;
          for (_j = 0, _len2 = _ref.length; _j < _len2; _j++) {
            match_child = _ref[_j];
            node.find_or_create_child(this, match_child.taxon_id, match_child.name, {
              greatest_profile_match: match_child.greatest_profile_match
            });
          }
        }
      }
      this.hide_loading();
      if (root_node.id === 'root') {
        if (matches.any()) {
          root_node.name || (root_node.name = 'Phenotype query');
          root_node.data.leaf_node = false;
          root_node.set_color();
        } else {
          root_node.name = 'No results';
          root_node.data.leaf_node = true;
          root_node.set_color();
        }
        return this.initialize_spacetree();
      } else {
        return this.update_spacetree(root_node);
      }
    };
    Tree.prototype.show_loading = function() {
      this.loading = true;
      $("#" + this.container_id).animate({
        backgroundColor: '#BBE2D6'
      }, {
        duration: 'fast',
        queue: true
      });
      return $("#" + this.container_id + "-loading").show();
    };
    Tree.prototype.hide_loading = function() {
      this.loading = false;
      return $("#" + this.container_id).animate({
        backgroundColor: '#FFFFFF'
      }, {
        duration: 'fast',
        queue: true,
        complete: __bind(function() {
          if (!this.loading) {
            return $("#" + this.container_id + "-loading").hide();
          }
        }, this)
      });
    };
    Tree.prototype.ajax_error_handler = function() {
      return alert('There was a problem requesting data. Check your internet connection or report this problem in feedback.');
    };
    Tree.prototype.find_node = function(id) {
      var result_node, search_nodes;
      if (!((id != null) && id.length > 0)) {
        return null;
      }
      search_nodes = this.root_node.children;
      while (search_nodes.any()) {
        result_node = search_nodes.find(function(node) {
          return node.id === id;
        });
        if (result_node != null) {
          return result_node;
        }
        search_nodes = search_nodes.map(function(node) {
          return node.children;
        });
        search_nodes = search_nodes.flatten();
      }
      return null;
    };
    Tree.prototype.check_empty_state = function() {
      var empty_state_div, tree_div;
      tree_div = $("#" + this.container_id);
      empty_state_div = $("#" + this.container_id + "-empty");
      if (this.phenotype_count && this.phenotype_count > 0) {
        empty_state_div.hide();
        return tree_div.css('visibility', 'visible');
      } else {
        tree_div.css('visibility', 'hidden');
        return empty_state_div.show();
      }
    };
    return Tree;
  })();
  TreeNode = (function() {
    function TreeNode(tree, id, name, data, children) {
      this.tree = tree;
      this.id = id;
      this.name = name;
      this.data = data != null ? data : {};
      this.children = children != null ? children : [];
      if (!this.data.$color) {
        this.set_color();
      }
      if (!(this.name != null) || this.name.blank()) {
        this.name = this.id;
      }
    }
    TreeNode.prototype.color = function() {
      var percentage;
      percentage = this.data.greatest_profile_match / this.tree.phenotype_count;
      if (percentage < .50 || this.data.leaf_node) {
        return 'lightgray';
      } else if (percentage < .75) {
        return 'yellow';
      } else if (percentage < 1) {
        return 'orange';
      } else {
        return '#F44';
      }
    };
    TreeNode.prototype.set_color = function() {
      return this.data.$color = this.color();
    };
    TreeNode.prototype.find_or_create_child = function(tree, id, name, data) {
      var child;
      if (data == null) {
        data = {};
      }
      child = this.children.find(function(c) {
        return c.id === id;
      });
      if (child != null) {
        return child;
      }
      child = new TreeNode(tree, id, name, data);
      this.children.push(child);
      return child;
    };
    TreeNode.create_root = function(tree) {
      return new TreeNode(tree, 'root');
    };
    return TreeNode;
  })();
  StateTransition = (function() {
    function StateTransition(path) {
      this.path = path;
      if (this.pushstate_supported) {
        this.push_state();
      } else {
        this.redirect();
      }
    }
    StateTransition.prototype.pushstate_supported = !!history.pushState;
    StateTransition.prototype.push_state = function() {
      return history.pushState({}, "", this.path);
    };
    StateTransition.prototype.redirect = function() {
      return window.location = this.path;
    };
    StateTransition.prototype.redirecting = !history.pushState;
    return StateTransition;
  })();
  window.profile_tree = new Tree('tree');
}).call(this);
