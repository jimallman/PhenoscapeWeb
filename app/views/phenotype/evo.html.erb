<h2>All phenotypes for <span class="term-name" title="<%=h @entity["id"] %>"><a href="/search/entity/<%=h @entity["id"] %>"><%=h @entity["name"] %></a></span> <span class="term-name" title="<%=h @quality["id"] %>"><%=h @quality["name"] %></span>
<% if @subject != nil %>
in <span class="term-name" title="<%=h @subject["id"] %>"><a href="/search/taxon/<%=h @subject["id"] %>"><%= format_taxon(h @subject["name"]) %></a></span>
<% end %>
</h2>

<% if false %> <!-- commented out -->
<table class="annotations sortable" id="datatable">
	<tr>
		<th>Taxon</th>
	</tr>
	<% for taxon in @taxa %>
	<tr>
		<td><%= taxon_link(taxon) %></td>
		<td>
			<ul>
				<% for phenotype in taxon["phenotypes"]%>
				<li>
				<%=h phenotype["entity"]["name"] %> <%=h phenotype["quality"]["name"] %>
				<% if not empty?(phenotype["count"]) %>
				<span class="phenotype-count">, <%= phenotype["count"] %></span>
				<% end %>
				<% if false %> <!-- commented out -->
				 [<a href="#" onclick="showSource([<%= (phenotype["reified_link"]).join(",") 	%>], this); return false;">Source</a>]
				<% end %>
				</li>
				<% end %>
			</ul>
		</td>
	</tr>
	<% end %>
</table>
<% end %>

<div id="phenotype-tree">
</div>


<script type="text/javascript">
var entity = <%= @entity.to_json %>;
var quality = <%= @quality.to_json %>;
var rootData = <%= @root.to_json %>;
//var childrenData = <%= @children.to_json %>;
//var root = {"label" : rootData["name"], "type" : "text", "data" : rootData, "expanded" : false};
var tree = new YAHOO.widget.TreeView("phenotype-tree");
createNodeForTaxon(rootData, tree.getRoot());
tree.setDynamicLoad(requestDataForChildren);
tree.subscribe("clickEvent", function(node) {
	//disable clicking on whole node to expand/collapse - this allows links inside node to work properly
	return false;
});
tree.render();
YAHOO.util.Event.onDOMReady(function() {
	expandRoot();
});

function expandRoot() {
	for (var i = 0; i < tree.getRoot().children.length; i++) {
		tree.getRoot().children[i].expand();
	}
}

function requestDataForChildren(parentNode, callback) {
	logDebug(keys(parentNode.data.phenotypes[0]));
	var dataGetter = loadJSONDoc(URL.childPhenotypes(entity["id"], quality["id"], parentNode["data"]["id"]));
	dataGetter.addCallback(function(result) {
		loadDataForChildren(parentNode, callback, result);
	});
	dataGetter.addErrback(function(result) {
		//TODO - should put some kind of data error alert next to taxon - and remove alert
		alert(result);
		callback();
	});
}

function loadDataForChildren(parentNode, callback, result) {
	for (var i = 0; i < result["subjects"].length; i++) {
		var taxon = result["subjects"][i];
		createNodeForTaxon(taxon, parentNode);
	}
	callback();
}

function createNodeForTaxon(taxonData, parentNode) {
	var phenotypes = taxonData.phenotypes;
	var taxonName = A({href: URL.taxon(taxonData["id"]), title: taxonData["id"]}, taxonData["name"]);
	var phenotypesContainer = UL({"class": "phenotype-block"});
	for (var i = 0; i < phenotypes.length; i++) {
		var phenotype = phenotypes[i];
		var phenotypeItem = createListItemForPhenotype(phenotype);
		appendChildNodes(phenotypesContainer, phenotypeItem);
		// if ((i + 1) < phenotypes.length) {
		// 			appendChildNodes(phenotypesContainer, "; ");
		// 		}
	}
	var container = DIV({"class": "tree-row"}, taxonName, phenotypesContainer);
	var outer = DIV(null, container);
	var node = new YAHOO.widget.HTMLNode({"html" : outer.innerHTML, "data" : taxonData, "href": null}, parentNode);
	// don't allow blue focus color
	node.focus = function() {return true;};
	if (node.depth % 2 == 0) {
		node["className"] = "tree-depth-even";
	} else {
		node["className"] = "tree-depth-odd";
	}
	return node;
}

function createListItemForPhenotype(phenotypeData) {
	var entity = phenotypeData.entity;
	var quality = phenotypeData.quality;
	var count = phenotypeData.count;
	var entityName = A({href: URL.entity(entity["id"]), title: entity["id"]}, entity["name"]);
	var qualityName = A({href: URL.quality(quality["id"]), title: quality["id"]}, quality["name"]);
	var container = LI(null, entityName, " ", qualityName);
	if ((count != null) && (count != "")) {
		appendChildNodes(container, ", " + count);
	}
	return container;
}


var deferred = null;

function showSource(id, element) {
	var sourcePanel = new YAHOO.widget.Panel("source_panel", {
		"context" : [element, YAHOO.widget.Overlay.TOP_RIGHT, YAHOO.widget.Overlay.BOTTOM_LEFT],
		"constraintoviewport" : true,
		"visible" : false
		});
	sourcePanel.hideEvent.subscribe(destroyPanel, sourcePanel);
	var img = IMG({"src":"/images/rotation.gif", "alt":"loading"});
	var div = DIV(null, img);
	sourcePanel.setBody(div);
	sourcePanel.setHeader("Loading...");
	if (deferred) { deferred.cancel(); }
	deferred = loadJSONDoc(URL.source([id]));
	deferred.addCallback(partial(fillInSource, sourcePanel));
	logDebug(id);
	logDebug(element);
	sourcePanel.render(document.body);
	sourcePanel.show();
}

function fillInSource(panel, content) {
	logDebug("Fill in source: " + content);
	var taxon = A(null, content["phenotype"]["subject"]["name"]);
	var entity = A(null, content["phenotype"]["entity"]["name"]);
	var quality = A(null, content["phenotype"]["quality"]["name"]);	
	replaceChildNodes(panel.header, taxon, " ", entity, " ", quality);
	var sources = map(function(item) {
		var citation = P(null, item["publication"]);
		var number = item["character_number"];
		var characterLabel = "character";
		if ((number != null) && (number != "")) {
			characterLabel += " " + number;
		}
		characterLabel += ":";
		var characterTable = TABLE(null, TR(null, TD(null, characterLabel), TD(null, item["character_text"])));
		if (item["character_comment"].length > 0) {
			logDebug("setting up comment");
			var comment = P({"style":"display: none;", "class":"character_comment"}, item["character_comment"]);
			var revealer = A({"href":"#"}, "View comment");
			var revealerBlock = P(null, revealer);
			connect(revealer, "onclick", function() {
				logDebug("Running onclick");
				hideElement(revealerBlock);
				blindDown(comment);
				return false;
			});
			var commentRow = TR(null, TD({"colspan":"2"}, revealerBlock, comment));
			appendChildNodes(characterTable, commentRow);
		}
		appendChildNodes(characterTable, TR(null, TD(null, "state:"), TD(null, item["state_text"])));
		return DIV(null, citation, characterTable);
	}, content["sources"]);
	replaceChildNodes(panel.body, sources);
}

function destroyPanel(type, args, obj) {
	logDebug("Destroy");
	if (deferred) { deferred.cancel(); }
	obj.destroy();
}

</script>