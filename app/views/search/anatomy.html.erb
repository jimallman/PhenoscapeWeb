<h2><span class="term-name" title="<%=h @term_info["id"] %>"><%=h @term_info["name"] %></span></h2>

<div id="term_info">
	<table>
		<tr>
			<td class="TermInfoPanel-field-label">Synonyms:</td>
			<td><%=h (@term_info["synonyms"].collect {|item| item["name"]}).join(", ") %></td>
		</tr>
		<tr>
			<td class="TermInfoPanel-field-label">Definition:</td>
			<td><%=h @term_info["definition"]%></td>
		</tr>
		<tr>
			<td class="TermInfoPanel-header-label" colspan="2">Parents</td>
		</tr>
		<% for relation in lump_relations(@term_info["parents"]) %>
		<tr>
			<td class="TermInfoPanel-field-label relation_name" title="<%=h relation["relation"]["id"] %>"><%=h relation["relation"]["name"] %></td>
			<td>
				<%= (relation["targets"].collect {|item| anatomy_link(item) }).join(", ") %>
			</td>
		</tr>
		<% end %>
		<tr>
			<td class="TermInfoPanel-header-label" colspan="2">Children</td>
		</tr>
		<% for relation in lump_relations(@term_info["children"]) %>
		<tr>
			<td class="TermInfoPanel-field-label relation_name" title="<%=h relation["relation"]["id"] %>"><%=h relation["relation"]["name"] %></td>
			<td>
				<%= (relation["targets"].collect {|item| anatomy_link(item) }).join(", ") %>
			</td>
		</tr>
		<% end %>
		<%  if not @homology.empty? %>
		<tr>
			<td class="TermInfoPanel-header-label" colspan="2">Possible Homologs</td>
		</tr>
		<tr>
			<td colspan="2">
				<%= list_more(format_homologies(@homology), 0) %>
			</td>
		</tr>
		<% end %>
	</table>
</div>

<h2>Phenotypes</h2>
<% if @summary["characters"].empty? %>
<p>No phenotypes were found involving <span class="term-name" title="<%=h @term_info["id"] %>"><%=h @term_info["name"] %></span>.</p>
<% else %>
<table class="annotations sortable" id="datatable">
	<tr>
		<th>Anatomy</th><th>Quality</th><th>Zebrafish Data</th><th>Evolutionary Data</th>
	</tr>
	<% for character in @summary["characters"] %>
	<tr>
		<td><%=h character["entity"]["name"] %></td>
		<td><%=h character["character_quality"]["name"] %><br>Values include:
			<%=h (character["qualities"]["examples"].collect {|item| item["name"]}).join(", ") %> and <%=h character["qualities"]["count"] - character["qualities"]["examples"].length %> more
		</td>
		<td>
			<% if character["genes"]["count"] > 0 %>
				<a href="/phenotype/devo/<%=h character["entity"]["id"]%>/<%=h character["character_quality"]["id"]%>/"><%=h character["genes"]["count"] %> genes
			<% else %>
				None
			<% end %>
		</td>
		<td>
			<% if character["taxa"]["count"] > 0 %>
				<a href="/phenotype/evo/<%=h character["entity"]["id"]%>/<%=h character["character_quality"]["id"]%>/"> <%=h character["taxa"]["count"] %> taxa
			<% else %>
				None
			<% end %>
		</td>
	</tr>
	<% end %>
</table>
<% end %>


<script type="text/javascript">

var homologies = <%= @homology_json %>["homologies"];

function showSource(anatomyID, taxonID, element) {
	var sourcePanel = new YAHOO.widget.Panel("source_panel", {
		"context" : [element, YAHOO.widget.Overlay.TOP_RIGHT, YAHOO.widget.Overlay.BOTTOM_LEFT],
		"constraintoviewport" : true,
		"visible" : false
		});
	sourcePanel.hideEvent.subscribe(destroyPanel, sourcePanel);
	var sources = filter(function(item) {
		return ((item["target"]["entity"]["id"] == anatomyID) && (item["target"]["taxon"]["id"] == taxonID));
	}, homologies);
	if (sources.length == 0) {
		// this should never happen
		return;
	}
	var target = sources[0]["target"];
	var body = P(null, target["entity"]["name"] + " in " + target["taxon"]["name"]);
	sourcePanel.setBody(body);
	sourcePanel.setHeader("Source");
	sourcePanel.render(document.body);
	sourcePanel.show();
}

function fillInSource(panel, content) {
	logDebug("Fill in source: " + content);
	// var taxon = A(null, content["phenotype"]["subject"]["name"]);
	// var entity = A(null, content["phenotype"]["entity"]["name"]);
	// var quality = A(null, content["phenotype"]["quality"]["name"]);	
	// replaceChildNodes(panel.header, taxon, " ", entity, " ", quality);
	// var sources = map(function(item) {
	// 	var citation = P(null, item["publication"]);
	// 	var characterTable = TABLE(null, TR(null, TD(null, "character:"), TD(null, item["character_text"])));
	// 	if (item["character_comment"].length > 0) {
	// 		logDebug("setting up comment");
	// 		var comment = P({"style":"display: none;", "class":"character_comment"}, item["character_comment"]);
	// 		var revealer = A({"href":"#"}, "View comment");
	// 		var revealerBlock = P(null, revealer);
	// 		connect(revealer, "onclick", function() {
	// 			logDebug("Running onclick");
	// 			hideElement(revealerBlock);
	// 			blindDown(comment);
	// 		});
	// 		var commentRow = TR(null, TD({"colspan":"2"}, revealerBlock, comment));
	// 		appendChildNodes(characterTable, commentRow);
	// 	}
	// 	appendChildNodes(characterTable, TR(null, TD(null, "state:"), TD(null, item["state_text"])));
	// 	var curator = P({"class":"curator"}, "curated by ", item["curated_by"]);
	// 	return DIV(null, citation, characterTable, curator);
	// }, content["sources"]);
	//replaceChildNodes(panel.body, sources);
	replaceChildNodes(panel.body, keys(content));
}

function destroyPanel(type, args, obj) {
	logDebug("Destroy");
	if (deferred) { deferred.cancel(); }
	obj.destroy();
}

</script>

